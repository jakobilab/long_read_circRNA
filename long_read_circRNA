#!/usr/bin/env python3

from pathlib import Path
import subprocess

import argparse

import csv
import gzip
import os
import sys

import pybedtools
import requests
from tqdm import tqdm

import yaml

def is_writeable(directory):
    try:
        with open(os.path.join(directory, 'testfile'), 'w'):
            os.remove(os.path.join(directory, 'testfile'))
            pass
    except PermissionError:
        return False
    else:
        return True

def get_id_from_column_9(input_string:str, entity:str):

    splits = input_string.strip().split(';')

    feature_dict = {}

    for split in splits:
        item = split.strip().split(" ")
        if len(item) == 2:
            feature_dict[item[0]] = item[1].replace("\"","")

    if entity in feature_dict:
        return feature_dict[entity]
    else:
        return None


def read_annotation_file(annotation_file, entity="exon"):
    """Reads a GTF file
    Will halt the program if file not accessible
    Returns a BedTool object only containing gene sections
    """
    """
    Reads a GTF file and outputs exons output used for the main script

    Download (needs to be the version__lift__version file as GTF, e.g. v37):
    https://www.gencodegenes.org/human/release_37lift37.html

    Expected output (each line one exon):
    chr1    11868   12227   DDX11L1 100     +       ENST00000456328.2_1     ENSG00000223972.5_4

    Args:
        annotation_file (str): Path to the GTF file.
    """
    try:
        file_handle = open(annotation_file)
    except PermissionError:
        message = ("Input file " + str(
            annotation_file) + " cannot be read, exiting.")
        sys.exit(message)
    else:

        with file_handle:
            line_iterator = iter(file_handle)
            bed_content = ""
            print("Start parsing GTF file")
            for line in line_iterator:
                # we skip any comment lines
                if line.startswith("#"):
                    continue

                # split up the annotation line
                columns = line.split('\t')

                if not (columns[2] == entity):
                    continue

                # we do not want any 0-length intervals -> bedtools segfault
                if int(columns[4]) - int(columns[3]) == 0:
                    continue

                entry = [
                    columns[0],
                    columns[3],
                    columns[4],
                    get_id_from_column_9(columns[8], "gene_name"),
                    "100",
                    columns[6],
                    get_id_from_column_9(columns[8], "transcript_id"),
                    get_id_from_column_9(columns[8], "gene_id")
                ]

                # concatenate lines to one string
                bed_content += '\t'.join(entry) + "\n"

        if not bed_content:
            exit(-1)


        # create a "virtual" BED file
        virtual_bed_file = pybedtools.BedTool(bed_content, from_string=True)

        return virtual_bed_file.sort()


def postprocess_ref_flat(refflat_csv: str):
    """
    Reads a refFlat file dumped by UCSC Genome Browser and outputs sorted
    exon output used for the main script

    refFlat schema:
    https://genome.ucsc.edu/cgi-bin/hgTables?hgta_doSchemaDb=hg38&hgta_doSchemaTable=refFlat

    Expected output:
    chr1    11868   12227   LOC102725121_exon_0_0_chr1_11869_f      0       +

    name = genename + exon # + 0 + chr + start+1 + strand (f or r)


    Args:
        file_path (str): Path to the input file.
        :param refflat_csv:
    """
    output_exons = ""
    output_genes = ""

    print("Creating refFlat-based exon files")
    try:
        with gzip.open(refflat_csv, mode='rt') as gz_file:
            csv_reader = csv.reader(gz_file, delimiter='\t')
            next(csv_reader, None)

            for row_number, row in enumerate(csv_reader, start=1):
                geneName, name, chrom, strand, txStart, txEnd, cdsStart, cdsEnd, exonCount, exonStarts, exonEnds = row

                starts = exonStarts.split(',')
                stops = exonEnds.split(',')

                output_genes += "\t".join(
                  [chrom, txStart, txEnd, geneName, str(0), strand]) + "\n"

                for exon_num in range(int(exonCount)-1):
                    strand_tag  = "f" if strand == "+" else "r"

                    name_tag = "_".join([geneName,"exon",str(exon_num),str(0),chrom,str(int(starts[exon_num])+1),strand_tag])

                    output_genes += "\t".join([chrom,starts[exon_num],stops[exon_num],geneName,str(0),strand]) + "\n"
                    output_exons += "\t".join([chrom,starts[exon_num],stops[exon_num],name_tag,str(0),strand]) + "\n"

        virtual_bed_file = pybedtools.BedTool(output_exons, from_string=True)

        virtual_bed_file_genes = pybedtools.BedTool(output_genes, from_string=True).sort()

        # the unique gene level file is different in regard to printing out all genes with comma instead of just choosing one
        # and omit the other co-optimal hits

        virtual_bed_file_genes = virtual_bed_file_genes.merge(s=True, o= ["distinct","count_distinct","distinct"], c=[4,4,6])

        virtual_bed_file_sorted = virtual_bed_file.sort()

        virtual_bed_file_merged = virtual_bed_file_sorted.merge(s=True, o= ["collapse","count","distinct"], c=[4,4,6])

        file_base = refflat_csv.replace(".gz", "")

        with open(file_base+".sort.bed", "w") as file:
            file.write(str(virtual_bed_file_sorted))

        with open(file_base+".unique.bed", "w") as file:
            file.write(str(virtual_bed_file_genes))

        with open(file_base+".merged.bed", "w") as file:
            file.write(str(virtual_bed_file_merged ))

    except FileNotFoundError:
        print(f"Error: File '{refflat_csv}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")



def postprocess_gencode(gencode_file: str):

    print("Creating GENCODE-based exon files")

    bed_file = read_annotation_file(gencode_file)

    file_base = gencode_file.replace(".gtf", "")

    with open(file_base + ".exon.bed", "w") as file:
        file.write(str(bed_file))

    virtual_bed_file_merged = bed_file.merge(s=True,
                                             o=["collapse",
                                                "count",
                                                "distinct"],
                                             c=[4, 4, 6])

    with open(file_base + ".exon.merge.bed", "w") as file:
        file.write(str(virtual_bed_file_merged))

def process_data(configuration: str, data_path: str):
    with open(configuration, 'r') as config_file:
        config = (yaml.safe_load(config_file))

        full_data_path=os.path.join(data_path, config['dataset'])

        if is_writeable(data_path):
            print("Writing data to {}".format(data_path))

            # create folder, e.g. h19
            if not os.path.exists(full_data_path):
                os.makedirs(full_data_path)

            for item in config:

                if 'url' in config[item]:

                    url = config[item]['url']
                    file_name = os.path.join(full_data_path, config[item]['name'])

                    file_type = config[item]['type']

                    file_name_unzipped = file_name.replace("."+file_type,
                                                           "")

                    if not os.path.exists(file_name_unzipped):

                        with requests.get(url, stream=True) as r:
                            r.raise_for_status()
                            total_size = int(r.headers.get('content-length', 0))

                            with open(file_name, 'wb') as f:
                                with tqdm(total=total_size, unit='B',
                                          unit_scale=True, desc="Downloading " + config[item]['name']) as pbar:
                                    for chunk in r.iter_content(chunk_size=8192):
                                        f.write(chunk)
                                        pbar.update(len(chunk))

                        # most files need to be unpacked
                        if file_type == 'gz':
                            print("Unpacking.")
                            os.system("gzip -d " + file_name)
                            print("Done.")

                        # work on the gencode file
                        if 'postprocess' in config[item] and \
                                config[item]['postprocess'] == 'gencode':

                            postprocess_gencode(gencode_file=file_name_unzipped)

                        # work with the refFlat file
                        if 'postprocess' in config[item] and \
                                config[item]['postprocess'] == 'refFlat':

                            postprocess_ref_flat(refflat_csv=file_name_unzipped)



                    # file already exists
                    else:
                        print("Skipping, " + config[item]['name'] +
                              ", file already exists.")






class ArgumentCaller:
    
    __version__ = 3.0
    
    def __init__(self):
        print(
r"""
  _                    ___             _      _        ___ _  _   _   
 | |   ___ _ _  __ _  | _ \___ __ _ __| |  __(_)_ _ __| _ \ \| | /_\  
 | |__/ _ \ ' \/ _` | |   / -_) _` / _` | / _| | '_/ _|   / .` |/ _ \ 
 |____\___/_||_\__, | |_|_\___\__,_\__,_| \__|_|_| \__|_|_\_|\_/_/ \_\ 
               |___/                                                    

Version: v{}

Original code by Morten T Ven√∏ <morten.veno@omiics.com>

Adapted for circtools integration by Tobias Jakobi <tjakobi@arizona.edu>
""".format(self.__version__))

        
        parser = argparse.ArgumentParser(
            description="Description: CircRNA detection in nanopore data",
            usage='''%(prog)s <command> [args]
            
                    Available sub-commands:
                        run         Main command for finding circRNAs in long read nanopore data
                        download    Download any required data for references and prepare
                        check       Check if all of the required software is available
                    ''')

        parser.add_argument('command', help='Specify which subcommand should be used')
        args = parser.parse_args(sys.argv[1:2])
        command = args.command

        # Correct for inputs with - in the name
        command = command.replace("-","_")
        if not hasattr(self, command):
            print("Unrecognized command")
            parser.print_help()
            sys.exit(1)
        getattr(self, command)()
        
    def run(self):
        parser = argparse.ArgumentParser(
            description="Run the program for detecting circRNAs in Oxford Nanopore data",
            prog="long_read_circRNA"
        )

        parser.add_argument(
            'sample',
            help="Provide a sample input .fq.gz file that should be processed.")
        parser.add_argument(
            '-r',
            '--reference-path',
            default="./data",
            help="Provide a path for where the reference data is located. Default is './data'.")
        parser.add_argument(
            '-g',
            '--genome',
            choices=['hg19', 'hg38', 'mm9', 'mm10'],
            help="Required. Select which genome build the sample that is from, and specify which genome reference files should be used.",
            required=True)
        parser.add_argument(
            '-s',
            '--script-path',
            default="~/long_read_circRNA/scripts",
            help="Specify where the long_read_circRNA scripts are located. Default: '~/long_read_circRNA/scripts'.")
        parser.add_argument(
            '-o',
            '--output-path',
            default=".",
            help="Provide a path for where the output should be saved. Default is the current directory.")
        parser.add_argument(
            '-t',
            '--threads',
            default=4,
            type=int,
            help="Number of threads for parallel steps. Default: 4.")
        parser.add_argument(
            '-d',
            '--dry-run',
            action="store_true",
            help="Perform all of the input checks without starting the detection scripts")
        parser.add_argument(
            '-k',
            '--keep-temp',
            action="store_true",
            help="Keep all of the temporary files.")
        
        args = parser.parse_args(sys.argv[2:])
    
        self.check_installation(args=False)
    
        reference_path = args.reference_path
        genome = args.genome
        threads = args.threads
        
        # Check if reference_path exists
        if not os.path.exists(reference_path):
            print("Error: '{}' does not exists! Please make sure that the path is written correctly".format(reference_path))
            exit(-1)
        
        # Check if reference_path is a directory:
        if not os.path.isdir(reference_path):
            print("Error: '{}' is not a directory! Please provide a directory that contains the reference data.".format(reference_path))
            exit(-1)

        # Check if reference_path contains genome in the end
        if os.path.basename(reference_path)==genome:
            print("Error: Looks like you have provided the direct path to the genome directory '{}'. Please simply provide data directory '{}'.".format(
                reference_path, os.path.dirname(reference_path)
            ))
            exit(-1)

        # Check if reference_path + genome exists
        if not os.path.exists(os.path.join(reference_path, genome)):
            print("Error: The genome build {} in the directory {} does not exist!".format(genome, reference_path))
            print("Note: You might need to download genome data first using the download command.")
            exit(-1)

        # Check if sample exists
        if not os.path.exists(args.sample):
            print("Error: Sample file '{}' does not exist!".format(args.sample))
            exit(-1)

        # Check if sample ends with ".fq.gz"
        if not args.sample.endswith(".fq.gz"):
            print("Error: Sample file '{}' does not end with '.fq.gz'".format(args.sample))
            exit(-1)

        # Prepare sample_path and sample_name
        reference_path = str(Path(reference_path).resolve())
        sample_path = str(Path(os.path.dirname(args.sample)).resolve())
        sample_name = os.path.basename(args.sample).replace('.fq.gz', '')
        
        script_path = str(Path(os.path.expanduser(args.script_path)).resolve())
        output_path = str(Path(args.output_path).resolve())
        
        # Check if the script-path exists
        if not os.path.exists(script_path):
            print("Error: The script path '{}' does not exists! Please point to the location of the scripts directory in the long_read_circRNA path using --script-path".format(script_path))
            exit(-1)

        # Check if the required scripts are in the script script-path
        target_scripts = ["blat_nanopore_v5.5.sh", "novel_exons_and_alternative_usage_v7.0.sh"]
        for target_script in target_scripts:
            if not os.path.exists(os.path.join(script_path, target_script)):
                print("Error: '{}' script is not found in the script path '{}'. Are you sure the provided script-path is correct?".format(target_script, script_path))
                exit(-1)

        # Check if the output path exists
        if not os.path.exists(output_path):
            print("Error: Output_path '{}' does not exist!".format(output_path))
            exit(-1)

        output_path = os.path.join(output_path, sample_name)
        
        print("Starting process with the following settings")
        print("\tSample name: {}".format(sample_name))
        print("\tReference path: {}".format(reference_path))
        print("\tSample path: {}".format(sample_path))
        print("\tGenome build: {}".format(genome))
        print("\tScript-path: {}".format(script_path))
        print("\tOutput-path: {}".format(output_path))
        
        original_directory = os.getcwd()
        
        if not args.dry_run:
            # Main process for circRNA detection
            print("")
            subprocess.run(["bash", os.path.join(script_path, "blat_nanopore_v6.0.sh"),
                            sample_path, sample_name, genome, reference_path, script_path, output_path, str(threads)])
            print("")
        
            print("circRNA detection has finished")
            print("Starting the novel exon and alternative usage script")
        
            os.chdir(original_directory)
            
            keep_check = {True: "yes", False: "no"}
            
            keep_temp = keep_check[args.keep_temp]
        
            print("")
            subprocess.run(["bash", os.path.join(script_path, "novel_exons_and_alternative_usage_v8.0.sh"),
                        sample_name, genome, reference_path, script_path, output_path, keep_temp, str(threads)])
            print("")
        
            print("Long_read_circRNA has finished!")
        else:
            print("Dry run is complete")

    def download(self, args=True):
        if args:
            parser = argparse.ArgumentParser(
                description="Download required data from Nanopore circRNA pipeline")

        # REQUIRED ARGUMENTS
        group = parser.add_argument_group("Required options")

        group.add_argument("-c",
                           "--config",
                           dest="config",
                           help="Path to the configuration file, e.g. hg19.yml",
                           required=True
                           )

        group.add_argument("-p",
                           "--path",
                           dest="path",
                           default="./data/",
                           help="Path to store the downloaded data files"
                           # required=True
                           )

        args = parser.parse_args(sys.argv[1:])

        if not os.path.isfile(args.config):
            print("Configuration file not accessible.")
        else:
            process_data(configuration=args.config, data_path=args.path)

    
    def check(self, args=True):
        if args:
            parser = argparse.ArgumentParser(
                description="Check if environment for running the script is properly setup by checking if all of the required software is available",
                usage="%(prog)s check-installation [args]"
            )
            args = parser.parse_args(sys.argv[2:])
        
        tools = {"bedtools": "bedtools", 
                 "NanoFilt": "NanoFilt -h", 
                 "pblat": "pblat", 
                 "perl": "perl -v",
                 "samtools": "samtools --help"}
        
        failed = False
        warn = False
        
        print()
        
        for tool in tools:
            print("Checking for {}".format(tool))
            try:
                output = subprocess.run(tools[tool].split(" "), stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=5)
                if output.returncode!=0:
                    print("\tThere might be a problem with {}".format(tool))
                    warn = True
            except FileNotFoundError:
                print("\\tUnable to find {}!".format(tool))
                failed = True
            except Exception as e:
                print(e)
        
        if warn:
            print()
            print("WARNING: There might be a problem with some of the software installed")
            print()
        
        if failed:
            print()
            print("ERROR: Some of the required software is missing!")
            print()
            sys.exit(1)
        else:
            print()
            print("All of the expected software requirements are present!")
            print()        
        
if __name__=="__main__":
    ArgumentCaller()
